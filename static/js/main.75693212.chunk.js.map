{"version":3,"sources":["fbase.js","components/AuthForm.js","components/AuthSocial.js","routes/Auth.js","components/Sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","newAccount","setNewAccount","email","setEmail","error","setError","password","setPassword","onSubmit","event","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","onChange","target","name","value","className","type","placeholder","required","onClick","prev","SocialAuth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Auth","icon","faTwitter","color","size","style","marginBottom","Sweet","sweetObj","isOwner","editing","setEditing","text","newSweet","setNewSweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","SweetFactory","userObj","sweet","setSweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","sweets","setSweets","useEffect","onSnapshot","snapshot","docs","sweetArray","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75693212.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\"; // 이걸 하지 않으면 인증기능을 할 수 없다.\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = { // .env 에서 불러쓰다가 자꾸 apikey값 에러가 떠서 그냥 입력했음 ... \n    apiKey: \"AIzaSyBjeyXoSahY7tNj6NseRDYNiAwPiYOEJME\",\n    authDomain: \"switter-4686c.firebaseapp.com\",\n    projectId: \"switter-4686c\",\n    storageBucket: \"switter-4686c.appspot.com\",\n    messagingSenderId: \"1029374224828\",\n    appId: \"1:1029374224828:web:8827c851f41bd1a38563b9\",\n  };\n\nfirebase.initializeApp(firebaseConfig);\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\n\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, { useState } from 'react';\nimport { authService } from \"fbase\";\n\n\nconst AuthForm = () => {\n    const [newAccount, setNewAccount] = useState(true);\n    const [email, setEmail] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const onSubmit = async (event) => {\n        event.preventDefault(); //일반적으로 submit을 하면 새로고침하면서 다시 랜더링이되는데 이럴경우 state가 날라가버린다. 이런상황을 막기위해 preventDefault를 쓰고 이럴경우 새로고침이 되지 않는다.\n        try {\n          let data;\n          if (newAccount) {\n            //create account\n            data = await authService.createUserWithEmailAndPassword(\n              // 계정이 없을때 새로운 계정을 만들고\n              email,\n              password\n            );\n          } else {\n            //log in\n            data = await authService.signInWithEmailAndPassword(\n              // 계정이 있으면 로그인\n              email,\n              password\n            );\n          }\n          console.log(data);\n        } catch (error) {\n          setError(error);\n        }\n      };\n      const onChange = (event) => {\n        //onChange 는 어떤 일이 일어났을때 사용되는 함수인데 여기서 event는 무슨일이 일어 났는가를 의미한다. 여기서는 input이 변경된것\n        const {\n          target: { name, value },\n        } = event; //그중에서 하나의 정보가 타겟,\n        if (name === \"email\") {\n          setEmail(value);\n        } else if (name === \"password\") {\n          setPassword(value);\n        } //console.log(value);\n      };\n      const toggleAccount = () => setNewAccount((prev) => !prev);\n\n    return (\n        <>\n        <form onSubmit={onSubmit} className=\"container\">\n        {/* http://tcpschool.com/html-tag-attrs/input-required  input태그의 required 는 폼데이터가 서버로 제출되기 전 반드시 채워져있어야 하는 입력필드를 의미 */}\n        {/* input은 letter를 추가하는것이 아닌 value를 받아오는것!  input이 바뀔때마다 state도 바뀌는것! */}\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          onChange={onChange}\n          required\n          value={email}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          onChange={onChange}\n          required\n          value={password}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n          className=\"authInput authSubmit\"\n        />{\" \"}\n        {/* 상태가 로그인이 되어있는 상태라면 로그인 아니라면 아이디 생성을 하게 한다. */}\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign in\" : \"Create Account\"}\n      </span>\n      </>\n    )\n}\n\nexport default AuthForm;","import React from \"react\";\nimport { authService, firebaseInstance } from \"fbase\";\n\nconst SocialAuth = () => {\n  const onSocialClick = async (event) => {\n    // console.log(event.target.name);\n    const {\n      target: { name },\n    } = event; //es6로 위의 코드를 작성\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data);\n  };\n  return (\n    <>\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"github\">\n          Continue with Github\n        </button>\n        <button onClick={onSocialClick} name=\"google\">\n          Continue with Google\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default SocialAuth;\n","\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n} from \"@fortawesome/free-brands-svg-icons\";\n// import isack from './isack.jpeg';\nimport AuthForm from \"../components/AuthForm\";\nimport SocialAuth from \"../components/AuthSocial\";\n\nconst Auth = () => {\n  return (\n    <div className=\"authContainer\">\n            {/* <img\n        src = {isack}\n        alt =\"isacklogo\"\n      /> */}\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <SocialAuth />\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Sweet = ({ sweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newSweet, setNewSweet] = useState(sweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this sweet?\");\n    if (ok) {\n      await dbService.doc(`sweets/${sweetObj.id}`).delete();\n      await storageService.refFromURL(sweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`sweets/${sweetObj.id}`).update({\n      text: newSweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewSweet(value);\n  };\n  return (\n    <div className=\"sweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container sweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"Edit your sweet\"\n              value={newSweet}\n              required\n              autoFocus\n              onChange={onChange}\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update Sweet\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            Cancel\n          </span>\n        </>\n      ) : (\n        <>\n          <h4>{sweetObj.text}</h4>\n          {sweetObj.attachmentUrl && <img src={sweetObj.attachmentUrl} />}\n          {isOwner && (\n            <div class=\"sweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Sweet;","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SweetFactory = ({ userObj }) => {\n  const [sweet, setSweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    if (sweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`); //collection 이랑 아주 흡사\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const sweetObj = {\n      text: sweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n\n    await dbService.collection(\"sweets\").add(sweetObj);\n    setSweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setSweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={sweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label for=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{ opacity: 0 }}\n      />\n      {attachment && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachment}\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default SweetFactory;\n","import React, { useEffect, useState } from \"react\";\nimport { dbService } from \"fbase\";\nimport Sweet from \"../components/Sweet\";\nimport SweetFactory from \"../components/SweetFactory\";\nconst Home = ({ userObj }) => {\n  const [sweets, setSweets] = useState([]);\n\n  useEffect(() => {\n    // getSweets();\n    dbService.collection(\"sweets\").onSnapshot((snapshot) => {\n      // console.log(\"something happend\");\n      console.log(snapshot.docs); //sweets은 snapshot으로부터 가져온다는것.\n      //24 비교 와 같은 역할을 하나 코드를 이렇게 짤 경우 더 적게 rerender하므로 더 빠르게 실행되도록 한다.\n      const sweetArray = snapshot.docs.map((doc) => ({\n        //query 가 아닌 snapshot 을 사용했기 때문에 실시간으로 볼 수 있다.\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setSweets(sweetArray);\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <SweetFactory userObj={userObj} />\n      <div style={{marginTop: 30}}>\n        {sweets.map((sweet) => (\n          <Sweet\n            key={sweet.id}\n            sweetObj={sweet}\n            isOwner={sweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { authService, dbService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory(); //hook을 써서 로그아웃후 홈으로 가게 한다.\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = () => {\n    authService.signOut();\n    // authService.currentUser.uid\n    history.push(\"/\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      // console.log(userObj.updateProfile)\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n  const getMySweets = async () => {\n    const sweets = await dbService\n      .collection(\"sweets\")\n      .where(\"creatorId\", \"==\", userObj.uid) //where 은 filter의 역할!\n      .orderBy(\"createdAt\", \"asc\")\n      .get();\n    console.log(sweets.docs.map((doc) => doc.data()));\n  };\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          autoFocus\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li>\n        <Link to=\"/\" style={{ marginRight: 10 }}>\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n        </Link>\n      </li>\n      <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj.displayName}의 Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  //Router는 예약어라 사용이 안된다\n  //Router 코드는 router기능만 넣기 위해서 현재는 밑의 코드를 App.js로 옮겨 놓았다.\n  // const [isLoggedIn, setIsLoggedIn] = useState(false); //기본 상태 값으로 false 를 줬다. 로그인이 안 되어있는 상태.\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      {/* 이 코드는 로그인이 되어있는 상태일때 네비게이션존재가 가능하게 하기 위한것 */}\n      <Switch>\n        {isLoggedIn ? (\n          //   fragment, <> 는 render 하고싶은 요소가 많을때 사용한다. <div> <span> 에 넣기 싫지만 사용은 해야 할 경우에.\n          <>\n            <div\n              style={{\n                maxWidth: 890,\n                width: \"100%\",\n                margin: \"0 auto\",\n                marginTop: 80,\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n              {/* <Redirect from=\"*\" to=\"/\" /> */}\n            </div>\n          </>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n            {/* <Redirect from=\"*\" to=\"/\" />  를 통해서 현재위치로부터 home으로 이동도 가능은 하다 */}\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  // const auth = fbase.auth(); 이렇게 해줄수도있고 firebase에 직접 해줄수도있다(마지막줄)\n  const [init, setInit] = useState(false);\n  // console.log(authService.currentUser);\n  // authService.currentUser //사용할 거 불러오기. 공식문서 참고! currentUser는 유저 또는 null 값을 리턴.\n  // const [isLoggedIn, setIsLoggedIn] = useState(false); //기본값 false 대신 authService.currentUser 넣어서 로그인상태로 만들수도 있음 // 또한 hooks를 사용하지않고 해결하는 방법도있음\n  // console.log(authService.currentUser); 로 확인해보면 시작할 때는 null이라뜨고 그 이후에 사용자 정보가 뜨는데 이것은 처음에는 로그인이 안되어있다는것이다. 이걸 해결하기 위해서 onAuthStateChanged 를 사용\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => /*console.log(user)*/ {\n      if (user) {\n        // setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        }); // 로그인을 하면 onAuthStateChanged가 실행되고 userObj에 user이름을 받아오게 한다.\n      }else{\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={/*isLoggedIn*/ Boolean(userObj)}\n          userObj={userObj}\n        /> //inLoggedIn 이 없어도 userObj가 있으면 inLoggedIn이 true인것과 같기때문에 이렇게 줄여서 사용할 수 있다.\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer>&copy; Switter {new Date().getFullYear()}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./sweetstyle.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}